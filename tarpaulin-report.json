{"files":[{"path":["/","Users","scott","Code","si","src","lib.rs"],"content":"//! Si - A CLI tool for AI image generation\n//!\n//! This library provides the core functionality for managing AI models\n//! and generating images locally.\n\npub mod models;\n\npub use models::{ModelFile, ModelIndex, ModelInfo, ModelManager, ModelManagerBuilder};\n","traces":[],"covered":0,"coverable":0},{"path":["/","Users","scott","Code","si","src","main.rs"],"content":"use std::path::PathBuf;\n\nuse anyhow::{anyhow, Result};\nuse clap::{Parser, Subcommand};\n\nuse log::debug;\n\nuse crate::models::ModelManager;\n\npub mod models;\n\n#[derive(Parser)]\n#[command(name = \"si\")]\n#[command(about = \"A CLI for the Si (see) AI image generator\")]\n#[command(version = \"0.1.0\")]\nstruct Cli {\n    #[command(subcommand)]\n    command: Commands,\n}\n\n#[derive(Subcommand)]\nenum Commands {\n    /// Model-related operations\n    Model {\n        #[command(subcommand)]\n        action: ModelCommands,\n    },\n    /// Configuration management\n    Config {\n        #[command(subcommand)]\n        action: ConfigCommands,\n    },\n    /// Image-related operations\n    Image {\n        #[command(subcommand)]\n        action: ImageCommands,\n    },\n}\n\n#[derive(Subcommand)]\nenum ModelCommands {\n    /// List available models\n    List,\n    /// Download a new model\n    Download {\n        /// Name of the model to download\n        name: String,\n    },\n    /// Delete a model\n    Delete {\n        /// Name of the model to delete\n        name: String,\n    },\n    /// Show model details\n    Show {\n        /// Name of the model to show\n        name: String,\n    },\n}\n\n#[derive(Subcommand)]\nenum ConfigCommands {\n    /// Show current configuration\n    Show,\n    /// Set a configuration value\n    Set {\n        /// Configuration key\n        key: String,\n        /// Configuration value\n        value: String,\n    },\n    /// Get a configuration value\n    Get {\n        /// Configuration key\n        key: String,\n    },\n    /// Reset configuration to defaults\n    Reset,\n}\n\n#[derive(Subcommand)]\nenum ImageCommands {\n    /// Generate an image\n    Generate {\n        /// Prompt for the image generation\n        prompt: String,\n        /// Model to use for generation\n        #[arg(short, long)]\n        model: String,\n        /// Input image file (jpg, png, gif, etc.)\n        #[arg(short, long)]\n        input: PathBuf,\n        /// Output image file\n        #[arg(short, long)]\n        output: PathBuf,\n    },\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    env_logger::init();\n\n    let cli = Cli::parse();\n\n    match cli.command {\n        Commands::Model { action } => handle_model_command(action).await,\n        Commands::Config { action } => handle_config_command(action),\n        Commands::Image { action } => handle_image_command(action),\n    }\n}\n\nasync fn handle_model_command(action: ModelCommands) -> Result<()> {\n    let model_manager = ModelManager::new()?;\n    match action {\n        ModelCommands::List => {\n            let models = model_manager\n                .list_models()\n                .map_err(|e| anyhow::anyhow!(\"Failed to list models: {}\", e))?;\n\n            for model in models {\n                println!(\"Model: {}\", model.model_id);\n                println!(\"  Files:\");\n                for file in &model.files {\n                    let file_name = file\n                        .path\n                        .file_name()\n                        .ok_or_else(|| anyhow!(\"Illegal file path: {}\", file.path.display()))?;\n                    println!(\n                        \"    - {} ({})\",\n                        file_name.display(),\n                        humansize::format_size(file.size, humansize::DECIMAL)\n                    );\n                }\n            }\n        }\n        ModelCommands::Download { name } => {\n            let model_info = model_manager.download_model(&name).await?;\n            debug!(\"Downloaded model: {:?}\", model_info);\n            println!(\"Model {name} downloaded successfully.\");\n        }\n        ModelCommands::Delete { name } => {\n            println!(\"Deleting model: {}\", name);\n            // TODO: Implement model deletion logic\n        }\n        ModelCommands::Show { name } => {\n            println!(\"Showing details for model: {}\", name);\n            // TODO: Implement model show logic\n        }\n    }\n    Ok(())\n}\n\nfn handle_config_command(action: ConfigCommands) -> Result<()> {\n    match action {\n        ConfigCommands::Show => {\n            println!(\"Showing current configuration...\");\n            // TODO: Implement config show logic\n        }\n        ConfigCommands::Set { key, value } => {\n            println!(\"Setting config: {} = {}\", key, value);\n            // TODO: Implement config set logic\n        }\n        ConfigCommands::Get { key } => {\n            println!(\"Getting config value for: {}\", key);\n            // TODO: Implement config get logic\n        }\n        ConfigCommands::Reset => {\n            println!(\"Resetting configuration to defaults...\");\n            // TODO: Implement config reset logic\n        }\n    }\n    Ok(())\n}\n\nfn handle_image_command(action: ImageCommands) -> Result<()> {\n    match action {\n        ImageCommands::Generate {\n            prompt,\n            model,\n            input,\n            output,\n        } => {\n            println!(\"Generating image with prompt: {}\", prompt);\n            println!(\"Using model: {}\", model);\n            println!(\"Input image: {}\", input.display());\n            println!(\"Output image: {}\", output.display());\n            // TODO: Implement image generation logic\n        }\n    }\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::path::PathBuf;\n    use tempfile::tempdir;\n\n    #[test]\n    fn test_handle_config_show() {\n        let action = ConfigCommands::Show;\n        let result = handle_config_command(action);\n        assert!(result.is_ok());\n    }\n\n    #[test]\n    fn test_handle_config_set() {\n        let action = ConfigCommands::Set {\n            key: \"test_key\".to_string(),\n            value: \"test_value\".to_string(),\n        };\n        let result = handle_config_command(action);\n        assert!(result.is_ok());\n    }\n\n    #[test]\n    fn test_handle_config_get() {\n        let action = ConfigCommands::Get {\n            key: \"test_key\".to_string(),\n        };\n        let result = handle_config_command(action);\n        assert!(result.is_ok());\n    }\n\n    #[test]\n    fn test_handle_config_reset() {\n        let action = ConfigCommands::Reset;\n        let result = handle_config_command(action);\n        assert!(result.is_ok());\n    }\n\n    #[test]\n    fn test_handle_image_generate() {\n        let temp_dir = tempdir().unwrap();\n        let input_path = temp_dir.path().join(\"input.jpg\");\n        let output_path = temp_dir.path().join(\"output.png\");\n\n        let action = ImageCommands::Generate {\n            prompt: \"A beautiful sunset\".to_string(),\n            model: \"test-model\".to_string(),\n            input: input_path,\n            output: output_path,\n        };\n\n        let result = handle_image_command(action);\n        assert!(result.is_ok());\n    }\n\n    #[test]\n    fn test_cli_parsing() {\n        // Test that the CLI can be parsed (this tests the derive macros)\n        use clap::CommandFactory;\n        let _cmd = Cli::command();\n    }\n\n    #[test]\n    fn test_model_commands_variants() {\n        // Test all ModelCommands variants can be created\n        let _list = ModelCommands::List;\n        let _download = ModelCommands::Download {\n            name: \"test\".to_string(),\n        };\n        let _delete = ModelCommands::Delete {\n            name: \"test\".to_string(),\n        };\n        let _show = ModelCommands::Show {\n            name: \"test\".to_string(),\n        };\n    }\n\n    #[test]\n    fn test_config_commands_variants() {\n        // Test all ConfigCommands variants can be created\n        let _show = ConfigCommands::Show;\n        let _set = ConfigCommands::Set {\n            key: \"key\".to_string(),\n            value: \"value\".to_string(),\n        };\n        let _get = ConfigCommands::Get {\n            key: \"key\".to_string(),\n        };\n        let _reset = ConfigCommands::Reset;\n    }\n\n    #[test]\n    fn test_image_commands_variants() {\n        // Test all ImageCommands variants can be created\n        let _generate = ImageCommands::Generate {\n            prompt: \"test\".to_string(),\n            model: \"model\".to_string(),\n            input: PathBuf::from(\"input.jpg\"),\n            output: PathBuf::from(\"output.png\"),\n        };\n    }\n\n    #[test]\n    fn test_commands_variants() {\n        // Test all Commands variants can be created\n        let _model = Commands::Model {\n            action: ModelCommands::List,\n        };\n        let _config = Commands::Config {\n            action: ConfigCommands::Show,\n        };\n        let _image = Commands::Image {\n            action: ImageCommands::Generate {\n                prompt: \"test\".to_string(),\n                model: \"model\".to_string(),\n                input: PathBuf::from(\"input.jpg\"),\n                output: PathBuf::from(\"output.png\"),\n            },\n        };\n    }\n}\n","traces":[{"line":100,"address":[],"length":0,"stats":{"Line":0}},{"line":101,"address":[],"length":0,"stats":{"Line":0}},{"line":103,"address":[],"length":0,"stats":{"Line":0}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":106,"address":[],"length":0,"stats":{"Line":0}},{"line":107,"address":[],"length":0,"stats":{"Line":0}},{"line":108,"address":[],"length":0,"stats":{"Line":0}},{"line":112,"address":[],"length":0,"stats":{"Line":0}},{"line":113,"address":[],"length":0,"stats":{"Line":0}},{"line":114,"address":[],"length":0,"stats":{"Line":0}},{"line":116,"address":[],"length":0,"stats":{"Line":0}},{"line":118,"address":[],"length":0,"stats":{"Line":0}},{"line":120,"address":[],"length":0,"stats":{"Line":0}},{"line":121,"address":[],"length":0,"stats":{"Line":0}},{"line":122,"address":[],"length":0,"stats":{"Line":0}},{"line":123,"address":[],"length":0,"stats":{"Line":0}},{"line":124,"address":[],"length":0,"stats":{"Line":0}},{"line":125,"address":[],"length":0,"stats":{"Line":0}},{"line":127,"address":[],"length":0,"stats":{"Line":0}},{"line":128,"address":[],"length":0,"stats":{"Line":0}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":131,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":0}},{"line":137,"address":[],"length":0,"stats":{"Line":0}},{"line":138,"address":[],"length":0,"stats":{"Line":0}},{"line":139,"address":[],"length":0,"stats":{"Line":0}},{"line":141,"address":[],"length":0,"stats":{"Line":0}},{"line":142,"address":[],"length":0,"stats":{"Line":0}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":150,"address":[],"length":0,"stats":{"Line":0}},{"line":153,"address":[],"length":0,"stats":{"Line":4}},{"line":154,"address":[],"length":0,"stats":{"Line":4}},{"line":155,"address":[],"length":0,"stats":{"Line":1}},{"line":156,"address":[],"length":0,"stats":{"Line":1}},{"line":159,"address":[],"length":0,"stats":{"Line":3}},{"line":160,"address":[],"length":0,"stats":{"Line":1}},{"line":163,"address":[],"length":0,"stats":{"Line":2}},{"line":164,"address":[],"length":0,"stats":{"Line":1}},{"line":167,"address":[],"length":0,"stats":{"Line":1}},{"line":168,"address":[],"length":0,"stats":{"Line":1}},{"line":172,"address":[],"length":0,"stats":{"Line":4}},{"line":175,"address":[],"length":0,"stats":{"Line":1}},{"line":176,"address":[],"length":0,"stats":{"Line":1}},{"line":178,"address":[],"length":0,"stats":{"Line":1}},{"line":179,"address":[],"length":0,"stats":{"Line":1}},{"line":180,"address":[],"length":0,"stats":{"Line":1}},{"line":181,"address":[],"length":0,"stats":{"Line":1}},{"line":182,"address":[],"length":0,"stats":{"Line":1}},{"line":183,"address":[],"length":0,"stats":{"Line":3}},{"line":184,"address":[],"length":0,"stats":{"Line":3}},{"line":185,"address":[],"length":0,"stats":{"Line":4}},{"line":186,"address":[],"length":0,"stats":{"Line":3}},{"line":190,"address":[],"length":0,"stats":{"Line":1}},{"line":200,"address":[],"length":0,"stats":{"Line":1}},{"line":201,"address":[],"length":0,"stats":{"Line":2}},{"line":202,"address":[],"length":0,"stats":{"Line":3}},{"line":207,"address":[],"length":0,"stats":{"Line":1}},{"line":209,"address":[],"length":0,"stats":{"Line":3}},{"line":210,"address":[],"length":0,"stats":{"Line":1}},{"line":212,"address":[],"length":0,"stats":{"Line":3}},{"line":217,"address":[],"length":0,"stats":{"Line":1}},{"line":219,"address":[],"length":0,"stats":{"Line":1}},{"line":221,"address":[],"length":0,"stats":{"Line":3}},{"line":226,"address":[],"length":0,"stats":{"Line":1}},{"line":227,"address":[],"length":0,"stats":{"Line":2}},{"line":228,"address":[],"length":0,"stats":{"Line":3}},{"line":233,"address":[],"length":0,"stats":{"Line":1}},{"line":234,"address":[],"length":0,"stats":{"Line":3}},{"line":235,"address":[],"length":0,"stats":{"Line":3}},{"line":236,"address":[],"length":0,"stats":{"Line":3}},{"line":239,"address":[],"length":0,"stats":{"Line":3}},{"line":240,"address":[],"length":0,"stats":{"Line":3}},{"line":245,"address":[],"length":0,"stats":{"Line":3}},{"line":250,"address":[],"length":0,"stats":{"Line":1}},{"line":253,"address":[],"length":0,"stats":{"Line":2}},{"line":257,"address":[],"length":0,"stats":{"Line":1}},{"line":259,"address":[],"length":0,"stats":{"Line":2}},{"line":261,"address":[],"length":0,"stats":{"Line":1}},{"line":264,"address":[],"length":0,"stats":{"Line":1}},{"line":267,"address":[],"length":0,"stats":{"Line":1}},{"line":272,"address":[],"length":0,"stats":{"Line":1}},{"line":274,"address":[],"length":0,"stats":{"Line":2}},{"line":276,"address":[],"length":0,"stats":{"Line":3}},{"line":277,"address":[],"length":0,"stats":{"Line":1}},{"line":280,"address":[],"length":0,"stats":{"Line":1}},{"line":282,"address":[],"length":0,"stats":{"Line":2}},{"line":286,"address":[],"length":0,"stats":{"Line":1}},{"line":289,"address":[],"length":0,"stats":{"Line":3}},{"line":290,"address":[],"length":0,"stats":{"Line":3}},{"line":291,"address":[],"length":0,"stats":{"Line":1}},{"line":292,"address":[],"length":0,"stats":{"Line":1}},{"line":297,"address":[],"length":0,"stats":{"Line":1}},{"line":306,"address":[],"length":0,"stats":{"Line":1}}],"covered":63,"coverable":95},{"path":["/","Users","scott","Code","si","src","models.rs"],"content":"use std::{\n    fs::{self, File},\n    path::{Path, PathBuf},\n    sync::OnceLock,\n};\n\nuse anyhow::{Context, Result};\nuse directories::ProjectDirs;\nuse hf_hub::api::tokio::Api;\nuse log::debug;\nuse serde::{Deserialize, Serialize};\n\nstatic PROJECT_DIR: OnceLock<Option<ProjectDirs>> = OnceLock::new();\nconst MODELS_DIR: &str = \"models\";\nconst MODEL_INDEX_FILENAME: &str = \"model_index.json\";\n\nfn get_project_dir() -> Option<&'static ProjectDirs> {\n    let dir = PROJECT_DIR.get_or_init(|| ProjectDirs::from(\"\", \"\", \"si\"));\n    dir.as_ref()\n}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct ModelInfo {\n    pub model_id: String,\n    pub files: Vec<ModelFile>,\n    // pub description: Option<String>,\n    // pub tags: Vec<String>,\n    // pub downloaded_at: Option<DateTime<Utc>>,\n    // pub size_bytes: u64,\n}\n\nimpl ModelInfo {\n    pub fn new<T: Into<String>>(model_id: T, files: Vec<ModelFile>) -> Self {\n        Self {\n            model_id: model_id.into(),\n            files,\n        }\n    }\n}\n\nimpl TryFrom<&Path> for ModelInfo {\n    type Error = anyhow::Error;\n\n    fn try_from(path: &Path) -> Result<Self> {\n        debug!(\"ModelInfo path: {path:?}\");\n        let file =\n            File::open(path).with_context(|| format!(\"Failed to open {}\", path.display()))?;\n        let info: ModelInfo = serde_json::from_reader(file)\n            .with_context(|| format!(\"Failed to parse model info from {}\", path.display()))?;\n\n        Ok(info)\n    }\n}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct ModelFile {\n    pub size: u64,\n    pub path: PathBuf,\n}\n\n#[derive(Debug)]\npub struct HuggingFaceRepoInfo {}\n\n#[derive(Debug)]\npub struct HuggingFaceFile {}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct ModelIndex {\n    pub models: Vec<ModelInfo>,\n}\n\nimpl TryFrom<&Path> for ModelIndex {\n    type Error = anyhow::Error;\n\n    fn try_from(path: &Path) -> Result<Self> {\n        debug!(\"ModelIndex path: {path:?}\");\n        let file =\n            File::open(path).with_context(|| format!(\"Failed to open {}\", path.display()))?;\n        let index: ModelIndex = serde_json::from_reader(file)\n            .with_context(|| format!(\"Failed to parse model index from {}\", path.display()))?;\n\n        Ok(index)\n    }\n}\n\npub struct ModelManagerBuilder {\n    models_dir: Option<PathBuf>,\n    hf_api: Option<Api>,\n}\n\nimpl ModelManagerBuilder {\n    pub fn new() -> Self {\n        Self {\n            models_dir: None,\n            hf_api: None,\n        }\n    }\n\n    pub fn with_models_dir(mut self, models_dir: PathBuf) -> Self {\n        self.models_dir = Some(models_dir);\n        self\n    }\n\n    pub fn with_hf_api(mut self, hf_api: Api) -> Self {\n        self.hf_api = Some(hf_api);\n        self\n    }\n\n    pub fn build(self) -> Result<ModelManager> {\n        let models_dir = self\n            .models_dir\n            .or_else(|| get_project_dir().map(|d| d.data_dir().join(MODELS_DIR)))\n            .context(\"Models directory is not set\")?;\n        let hf_api = self\n            .hf_api\n            .or(Api::new().ok())\n            .context(\"Failed to create HuggingFace API client\")?;\n        Ok(ModelManager { models_dir, hf_api })\n    }\n}\n\n#[derive(Debug)]\npub struct ModelManager {\n    models_dir: PathBuf,\n    hf_api: Api,\n}\n\nimpl ModelManager {\n    pub fn new() -> Result<Self> {\n        let model_manager = ModelManagerBuilder::new().build()?;\n        fs::create_dir_all(&model_manager.models_dir)\n            .with_context(|| \"Failed to create models dir\")?;\n        Ok(model_manager)\n    }\n\n    pub fn list_models(&self) -> Result<Vec<ModelInfo>> {\n        let model_index: ModelIndex = serde_json::from_reader(\n            File::open(&self.models_dir.join(MODEL_INDEX_FILENAME))\n                .context(\"Couldn't open model index\")?,\n        )\n        .with_context(|| \"Couldn't de-serialize model index\")?;\n        Ok(model_index.models)\n    }\n\n    pub async fn download_model(&self, model_id: &str) -> Result<ModelInfo> {\n        debug!(\"download_model: {model_id}\");\n        let mut model_info = ModelInfo::new(model_id, vec![]);\n        let model = self.hf_api.model(model_id.to_string());\n        let info = model\n            .info()\n            .await\n            .with_context(|| format!(\"Failed to get info for `{model_id}`\"))?;\n        debug!(\"  info: {info:?}\");\n        for sibling in &info.siblings {\n            debug!(\"    downloading file: {}\", sibling.rfilename);\n            let local_path = model\n                .download(&sibling.rfilename)\n                .await\n                .with_context(|| format!(\"{} download faild\", &sibling.rfilename))?;\n            model_info.files.push(ModelFile {\n                size: fs::metadata(local_path.as_path())\n                    .with_context(|| {\n                        format!(\"Couldn't get file size for `{}`\", local_path.display())\n                    })?\n                    .len(),\n                path: local_path,\n            });\n        }\n\n        Ok(model_info)\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::io::Write;\n    use tempfile::{tempdir, NamedTempFile};\n\n    #[test]\n    fn test_model_info_new() {\n        let files = vec![\n            ModelFile {\n                size: 1024,\n                path: PathBuf::from(\"/path/to/file1.bin\"),\n            },\n            ModelFile {\n                size: 2048,\n                path: PathBuf::from(\"/path/to/file2.json\"),\n            },\n        ];\n\n        let model_info = ModelInfo::new(\"test-model\", files.clone());\n\n        assert_eq!(model_info.model_id, \"test-model\");\n        assert_eq!(model_info.files.len(), 2);\n        assert_eq!(model_info.files[0].size, 1024);\n        assert_eq!(model_info.files[1].size, 2048);\n    }\n\n    #[test]\n    fn test_model_info_from_path() -> Result<()> {\n        let mut temp_file = NamedTempFile::new()?;\n        let model_data = r#\"{\n            \"model_id\": \"test-model\",\n            \"files\": [\n                {\n                    \"size\": 1024,\n                    \"path\": \"/path/to/file.bin\"\n                }\n            ]\n        }\"#;\n\n        temp_file.write_all(model_data.as_bytes())?;\n        temp_file.flush()?;\n\n        let model_info = ModelInfo::try_from(temp_file.path())?;\n\n        assert_eq!(model_info.model_id, \"test-model\");\n        assert_eq!(model_info.files.len(), 1);\n        assert_eq!(model_info.files[0].size, 1024);\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_model_info_from_invalid_path() {\n        let result = ModelInfo::try_from(Path::new(\"/nonexistent/path\"));\n        assert!(result.is_err());\n    }\n\n    #[test]\n    fn test_model_info_from_invalid_json() -> Result<()> {\n        let mut temp_file = NamedTempFile::new()?;\n        temp_file.write_all(b\"invalid json\")?;\n        temp_file.flush()?;\n\n        let result = ModelInfo::try_from(temp_file.path());\n        assert!(result.is_err());\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_model_index_from_path() -> Result<()> {\n        let mut temp_file = NamedTempFile::new()?;\n        let index_data = r#\"{\n            \"models\": [\n                {\n                    \"model_id\": \"model1\",\n                    \"files\": []\n                },\n                {\n                    \"model_id\": \"model2\",\n                    \"files\": [\n                        {\n                            \"size\": 512,\n                            \"path\": \"/path/to/model2.bin\"\n                        }\n                    ]\n                }\n            ]\n        }\"#;\n\n        temp_file.write_all(index_data.as_bytes())?;\n        temp_file.flush()?;\n\n        let model_index = ModelIndex::try_from(temp_file.path())?;\n\n        assert_eq!(model_index.models.len(), 2);\n        assert_eq!(model_index.models[0].model_id, \"model1\");\n        assert_eq!(model_index.models[1].model_id, \"model2\");\n        assert_eq!(model_index.models[1].files.len(), 1);\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_model_index_from_invalid_path() {\n        let result = ModelIndex::try_from(Path::new(\"/nonexistent/path\"));\n        assert!(result.is_err());\n    }\n\n    #[test]\n    fn test_model_manager_builder() -> Result<()> {\n        let temp_dir = tempdir()?;\n        let models_dir = temp_dir.path().join(\"models\");\n\n        let api = Api::new().unwrap_or_else(|_| panic!(\"Failed to create API for test\"));\n\n        let manager = ModelManagerBuilder::new()\n            .with_models_dir(models_dir.clone())\n            .with_hf_api(api)\n            .build()?;\n\n        assert_eq!(manager.models_dir, models_dir);\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_model_manager_builder_without_models_dir() {\n        // This test assumes the system has a valid project directory\n        let api = Api::new().unwrap_or_else(|_| panic!(\"Failed to create API for test\"));\n\n        let result = ModelManagerBuilder::new().with_hf_api(api).build();\n\n        // Should either succeed with default directory or fail gracefully\n        match result {\n            Ok(_) => {\n                // Success case - default directory was available\n            }\n            Err(_) => {\n                // Failure case - no default directory available\n                // This is acceptable in test environments\n            }\n        }\n    }\n\n    #[test]\n    fn test_model_manager_builder_without_api() {\n        let temp_dir = tempdir().unwrap();\n        let models_dir = temp_dir.path().join(\"models\");\n\n        let result = ModelManagerBuilder::new()\n            .with_models_dir(models_dir)\n            .build();\n\n        // Should either succeed with default API or fail gracefully\n        match result {\n            Ok(_) => {\n                // Success case - API creation succeeded\n            }\n            Err(_) => {\n                // Failure case - API creation failed (e.g., no network)\n                // This is acceptable in test environments\n            }\n        }\n    }\n\n    #[test]\n    fn test_model_manager_list_models_no_index() -> Result<()> {\n        let temp_dir = tempdir()?;\n        let models_dir = temp_dir.path().join(\"models\");\n        fs::create_dir_all(&models_dir)?;\n\n        let api = Api::new().unwrap_or_else(|_| panic!(\"Failed to create API for test\"));\n\n        let manager = ModelManagerBuilder::new()\n            .with_models_dir(models_dir)\n            .with_hf_api(api)\n            .build()?;\n\n        let result = manager.list_models();\n        assert!(result.is_err());\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_model_manager_list_models_with_index() -> Result<()> {\n        let temp_dir = tempdir()?;\n        let models_dir = temp_dir.path().join(\"models\");\n        fs::create_dir_all(&models_dir)?;\n\n        // Create a model index file\n        let index_path = models_dir.join(MODEL_INDEX_FILENAME);\n        let index_data = r#\"{\n            \"models\": [\n                {\n                    \"model_id\": \"test-model\",\n                    \"files\": [\n                        {\n                            \"size\": 1024,\n                            \"path\": \"/path/to/file.bin\"\n                        }\n                    ]\n                }\n            ]\n        }\"#;\n        fs::write(&index_path, index_data)?;\n\n        let api = Api::new().unwrap_or_else(|_| panic!(\"Failed to create API for test\"));\n\n        let manager = ModelManagerBuilder::new()\n            .with_models_dir(models_dir)\n            .with_hf_api(api)\n            .build()?;\n\n        let models = manager.list_models()?;\n        assert_eq!(models.len(), 1);\n        assert_eq!(models[0].model_id, \"test-model\");\n        assert_eq!(models[0].files.len(), 1);\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_get_project_dir() {\n        // Test that get_project_dir returns a consistent value\n        let dir1 = get_project_dir();\n        let dir2 = get_project_dir();\n\n        // Both calls should return the same result\n        assert_eq!(dir1.is_some(), dir2.is_some());\n\n        if let (Some(d1), Some(d2)) = (dir1, dir2) {\n            assert_eq!(d1.data_dir(), d2.data_dir());\n        }\n    }\n\n    #[test]\n    fn test_model_file_serialization() -> Result<()> {\n        let model_file = ModelFile {\n            size: 2048,\n            path: PathBuf::from(\"/test/path/file.bin\"),\n        };\n\n        let json = serde_json::to_string(&model_file)?;\n        let deserialized: ModelFile = serde_json::from_str(&json)?;\n\n        assert_eq!(model_file.size, deserialized.size);\n        assert_eq!(model_file.path, deserialized.path);\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_model_info_serialization() -> Result<()> {\n        let files = vec![\n            ModelFile {\n                size: 1024,\n                path: PathBuf::from(\"/path/to/file1.bin\"),\n            },\n            ModelFile {\n                size: 2048,\n                path: PathBuf::from(\"/path/to/file2.json\"),\n            },\n        ];\n\n        let model_info = ModelInfo::new(\"test-model\", files);\n\n        let json = serde_json::to_string(&model_info)?;\n        let deserialized: ModelInfo = serde_json::from_str(&json)?;\n\n        assert_eq!(model_info.model_id, deserialized.model_id);\n        assert_eq!(model_info.files.len(), deserialized.files.len());\n\n        for (original, deserialized) in model_info.files.iter().zip(deserialized.files.iter()) {\n            assert_eq!(original.size, deserialized.size);\n            assert_eq!(original.path, deserialized.path);\n        }\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_model_index_serialization() -> Result<()> {\n        let models = vec![\n            ModelInfo::new(\"model1\", vec![]),\n            ModelInfo::new(\n                \"model2\",\n                vec![ModelFile {\n                    size: 512,\n                    path: PathBuf::from(\"/path/to/model2.bin\"),\n                }],\n            ),\n        ];\n\n        let model_index = ModelIndex { models };\n\n        let json = serde_json::to_string(&model_index)?;\n        let deserialized: ModelIndex = serde_json::from_str(&json)?;\n\n        assert_eq!(model_index.models.len(), deserialized.models.len());\n        assert_eq!(\n            model_index.models[0].model_id,\n            deserialized.models[0].model_id\n        );\n        assert_eq!(\n            model_index.models[1].model_id,\n            deserialized.models[1].model_id\n        );\n        assert_eq!(\n            model_index.models[1].files.len(),\n            deserialized.models[1].files.len()\n        );\n\n        Ok(())\n    }\n}\n","traces":[{"line":17,"address":[],"length":0,"stats":{"Line":7}},{"line":18,"address":[],"length":0,"stats":{"Line":33}},{"line":19,"address":[],"length":0,"stats":{"Line":14}},{"line":33,"address":[],"length":0,"stats":{"Line":15}},{"line":35,"address":[],"length":0,"stats":{"Line":30}},{"line":44,"address":[],"length":0,"stats":{"Line":7}},{"line":45,"address":[],"length":0,"stats":{"Line":7}},{"line":46,"address":[],"length":0,"stats":{"Line":5}},{"line":47,"address":[],"length":0,"stats":{"Line":29}},{"line":48,"address":[],"length":0,"stats":{"Line":3}},{"line":49,"address":[],"length":0,"stats":{"Line":8}},{"line":51,"address":[],"length":0,"stats":{"Line":0}},{"line":75,"address":[],"length":0,"stats":{"Line":5}},{"line":76,"address":[],"length":0,"stats":{"Line":5}},{"line":77,"address":[],"length":0,"stats":{"Line":3}},{"line":78,"address":[],"length":0,"stats":{"Line":23}},{"line":79,"address":[],"length":0,"stats":{"Line":3}},{"line":80,"address":[],"length":0,"stats":{"Line":0}},{"line":82,"address":[],"length":0,"stats":{"Line":0}},{"line":92,"address":[],"length":0,"stats":{"Line":16}},{"line":99,"address":[],"length":0,"stats":{"Line":13}},{"line":100,"address":[],"length":0,"stats":{"Line":26}},{"line":101,"address":[],"length":0,"stats":{"Line":13}},{"line":104,"address":[],"length":0,"stats":{"Line":8}},{"line":105,"address":[],"length":0,"stats":{"Line":16}},{"line":106,"address":[],"length":0,"stats":{"Line":8}},{"line":109,"address":[],"length":0,"stats":{"Line":16}},{"line":110,"address":[],"length":0,"stats":{"Line":32}},{"line":111,"address":[],"length":0,"stats":{"Line":16}},{"line":112,"address":[],"length":0,"stats":{"Line":28}},{"line":114,"address":[],"length":0,"stats":{"Line":16}},{"line":129,"address":[],"length":0,"stats":{"Line":0}},{"line":130,"address":[],"length":0,"stats":{"Line":0}},{"line":131,"address":[],"length":0,"stats":{"Line":0}},{"line":132,"address":[],"length":0,"stats":{"Line":0}},{"line":133,"address":[],"length":0,"stats":{"Line":0}},{"line":136,"address":[],"length":0,"stats":{"Line":12}},{"line":138,"address":[],"length":0,"stats":{"Line":24}},{"line":139,"address":[],"length":0,"stats":{"Line":14}},{"line":141,"address":[],"length":0,"stats":{"Line":1}},{"line":145,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":0}},{"line":147,"address":[],"length":0,"stats":{"Line":0}},{"line":148,"address":[],"length":0,"stats":{"Line":0}},{"line":149,"address":[],"length":0,"stats":{"Line":0}},{"line":151,"address":[],"length":0,"stats":{"Line":0}},{"line":152,"address":[],"length":0,"stats":{"Line":0}},{"line":153,"address":[],"length":0,"stats":{"Line":0}},{"line":154,"address":[],"length":0,"stats":{"Line":0}},{"line":155,"address":[],"length":0,"stats":{"Line":0}},{"line":156,"address":[],"length":0,"stats":{"Line":0}},{"line":157,"address":[],"length":0,"stats":{"Line":0}},{"line":158,"address":[],"length":0,"stats":{"Line":0}},{"line":159,"address":[],"length":0,"stats":{"Line":0}},{"line":160,"address":[],"length":0,"stats":{"Line":0}},{"line":161,"address":[],"length":0,"stats":{"Line":0}},{"line":162,"address":[],"length":0,"stats":{"Line":0}},{"line":163,"address":[],"length":0,"stats":{"Line":0}},{"line":165,"address":[],"length":0,"stats":{"Line":0}},{"line":166,"address":[],"length":0,"stats":{"Line":0}},{"line":170,"address":[],"length":0,"stats":{"Line":0}},{"line":181,"address":[],"length":0,"stats":{"Line":2}},{"line":182,"address":[],"length":0,"stats":{"Line":4}},{"line":183,"address":[],"length":0,"stats":{"Line":2}},{"line":184,"address":[],"length":0,"stats":{"Line":2}},{"line":185,"address":[],"length":0,"stats":{"Line":2}},{"line":187,"address":[],"length":0,"stats":{"Line":2}},{"line":188,"address":[],"length":0,"stats":{"Line":2}},{"line":189,"address":[],"length":0,"stats":{"Line":2}},{"line":193,"address":[],"length":0,"stats":{"Line":8}},{"line":202,"address":[],"length":0,"stats":{"Line":2}},{"line":203,"address":[],"length":0,"stats":{"Line":4}},{"line":214,"address":[],"length":0,"stats":{"Line":0}},{"line":215,"address":[],"length":0,"stats":{"Line":2}},{"line":217,"address":[],"length":0,"stats":{"Line":4}},{"line":223,"address":[],"length":0,"stats":{"Line":2}},{"line":227,"address":[],"length":0,"stats":{"Line":2}},{"line":228,"address":[],"length":0,"stats":{"Line":8}},{"line":233,"address":[],"length":0,"stats":{"Line":2}},{"line":234,"address":[],"length":0,"stats":{"Line":4}},{"line":235,"address":[],"length":0,"stats":{"Line":0}},{"line":236,"address":[],"length":0,"stats":{"Line":2}},{"line":238,"address":[],"length":0,"stats":{"Line":2}},{"line":241,"address":[],"length":0,"stats":{"Line":2}},{"line":245,"address":[],"length":0,"stats":{"Line":2}},{"line":246,"address":[],"length":0,"stats":{"Line":4}},{"line":265,"address":[],"length":0,"stats":{"Line":0}},{"line":266,"address":[],"length":0,"stats":{"Line":2}},{"line":268,"address":[],"length":0,"stats":{"Line":4}},{"line":275,"address":[],"length":0,"stats":{"Line":2}},{"line":279,"address":[],"length":0,"stats":{"Line":2}},{"line":280,"address":[],"length":0,"stats":{"Line":8}},{"line":285,"address":[],"length":0,"stats":{"Line":2}},{"line":286,"address":[],"length":0,"stats":{"Line":4}},{"line":289,"address":[],"length":0,"stats":{"Line":0}},{"line":291,"address":[],"length":0,"stats":{"Line":2}},{"line":298,"address":[],"length":0,"stats":{"Line":2}},{"line":302,"address":[],"length":0,"stats":{"Line":2}},{"line":304,"address":[],"length":0,"stats":{"Line":6}},{"line":306,"address":[],"length":0,"stats":{"Line":10}},{"line":309,"address":[],"length":0,"stats":{"Line":2}},{"line":310,"address":[],"length":0,"stats":{"Line":2}},{"line":313,"address":[],"length":0,"stats":{"Line":0}},{"line":321,"address":[],"length":0,"stats":{"Line":2}},{"line":322,"address":[],"length":0,"stats":{"Line":6}},{"line":323,"address":[],"length":0,"stats":{"Line":6}},{"line":325,"address":[],"length":0,"stats":{"Line":4}},{"line":326,"address":[],"length":0,"stats":{"Line":4}},{"line":330,"address":[],"length":0,"stats":{"Line":2}},{"line":331,"address":[],"length":0,"stats":{"Line":2}},{"line":334,"address":[],"length":0,"stats":{"Line":0}},{"line":342,"address":[],"length":0,"stats":{"Line":2}},{"line":343,"address":[],"length":0,"stats":{"Line":4}},{"line":345,"address":[],"length":0,"stats":{"Line":0}},{"line":347,"address":[],"length":0,"stats":{"Line":2}},{"line":349,"address":[],"length":0,"stats":{"Line":2}},{"line":357,"address":[],"length":0,"stats":{"Line":2}},{"line":361,"address":[],"length":0,"stats":{"Line":2}},{"line":362,"address":[],"length":0,"stats":{"Line":4}},{"line":364,"address":[],"length":0,"stats":{"Line":0}},{"line":367,"address":[],"length":0,"stats":{"Line":2}},{"line":381,"address":[],"length":0,"stats":{"Line":0}},{"line":383,"address":[],"length":0,"stats":{"Line":2}},{"line":385,"address":[],"length":0,"stats":{"Line":2}},{"line":390,"address":[],"length":0,"stats":{"Line":2}},{"line":395,"address":[],"length":0,"stats":{"Line":2}},{"line":399,"address":[],"length":0,"stats":{"Line":2}},{"line":401,"address":[],"length":0,"stats":{"Line":4}},{"line":402,"address":[],"length":0,"stats":{"Line":4}},{"line":407,"address":[],"length":0,"stats":{"Line":6}},{"line":413,"address":[],"length":0,"stats":{"Line":2}},{"line":416,"address":[],"length":0,"stats":{"Line":2}},{"line":419,"address":[],"length":0,"stats":{"Line":6}},{"line":420,"address":[],"length":0,"stats":{"Line":2}},{"line":425,"address":[],"length":0,"stats":{"Line":2}},{"line":429,"address":[],"length":0,"stats":{"Line":2}},{"line":430,"address":[],"length":0,"stats":{"Line":4}},{"line":431,"address":[],"length":0,"stats":{"Line":2}},{"line":432,"address":[],"length":0,"stats":{"Line":2}},{"line":433,"address":[],"length":0,"stats":{"Line":2}},{"line":435,"address":[],"length":0,"stats":{"Line":2}},{"line":436,"address":[],"length":0,"stats":{"Line":2}},{"line":437,"address":[],"length":0,"stats":{"Line":2}},{"line":441,"address":[],"length":0,"stats":{"Line":6}},{"line":443,"address":[],"length":0,"stats":{"Line":6}},{"line":444,"address":[],"length":0,"stats":{"Line":2}},{"line":449,"address":[],"length":0,"stats":{"Line":14}},{"line":454,"address":[],"length":0,"stats":{"Line":2}},{"line":458,"address":[],"length":0,"stats":{"Line":2}},{"line":459,"address":[],"length":0,"stats":{"Line":4}},{"line":460,"address":[],"length":0,"stats":{"Line":4}},{"line":461,"address":[],"length":0,"stats":{"Line":2}},{"line":463,"address":[],"length":0,"stats":{"Line":4}},{"line":464,"address":[],"length":0,"stats":{"Line":2}},{"line":465,"address":[],"length":0,"stats":{"Line":2}},{"line":470,"address":[],"length":0,"stats":{"Line":4}},{"line":472,"address":[],"length":0,"stats":{"Line":6}},{"line":473,"address":[],"length":0,"stats":{"Line":2}},{"line":489,"address":[],"length":0,"stats":{"Line":2}}],"covered":121,"coverable":159},{"path":["/","Users","scott","Code","si","tests","integration_tests.rs"],"content":"use assert_fs::prelude::*;\n\nuse std::process::Command;\nuse tempfile::tempdir;\n\nconst BINARY_NAME: &str = \"si\";\n\nfn get_binary_path() -> std::path::PathBuf {\n    // First try to find the binary in the target directory\n    let manifest_dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap_or_else(|_| \".\".to_string());\n    let target_dir = std::path::Path::new(&manifest_dir)\n        .join(\"target\")\n        .join(\"debug\")\n        .join(BINARY_NAME);\n\n    if target_dir.exists() {\n        return target_dir;\n    }\n\n    // Fallback: try to find it relative to the test executable\n    std::env::current_exe()\n        .unwrap()\n        .parent()\n        .unwrap()\n        .parent()\n        .unwrap()\n        .join(\"deps\")\n        .join(BINARY_NAME)\n}\n\n#[test]\nfn test_cli_help() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.arg(\"--help\");\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"A CLI for the Si (see) AI image generator\"));\n    assert!(stdout.contains(\"model\"));\n    assert!(stdout.contains(\"config\"));\n    assert!(stdout.contains(\"image\"));\n}\n\n#[test]\nfn test_cli_version() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.arg(\"--version\");\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"0.1.0\"));\n}\n\n#[test]\nfn test_model_help() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"model\", \"--help\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Model-related operations\"));\n    assert!(stdout.contains(\"list\"));\n    assert!(stdout.contains(\"download\"));\n    assert!(stdout.contains(\"delete\"));\n    assert!(stdout.contains(\"show\"));\n}\n\n#[test]\nfn test_config_help() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"config\", \"--help\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Configuration management\"));\n    assert!(stdout.contains(\"show\"));\n    assert!(stdout.contains(\"set\"));\n    assert!(stdout.contains(\"get\"));\n    assert!(stdout.contains(\"reset\"));\n}\n\n#[test]\nfn test_image_help() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"image\", \"--help\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Image-related operations\"));\n    assert!(stdout.contains(\"generate\"));\n}\n\n#[test]\nfn test_model_list_no_models() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"model\", \"list\"]);\n\n    // Set a temporary directory as the data directory\n    let temp_dir = tempdir().unwrap();\n    cmd.env(\"XDG_DATA_HOME\", temp_dir.path());\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    // Should fail because there's no model index\n    assert!(!output.status.success());\n}\n\n#[test]\nfn test_config_show() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"config\", \"show\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Showing current configuration\"));\n}\n\n#[test]\nfn test_config_set() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"config\", \"set\", \"test_key\", \"test_value\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Setting config: test_key = test_value\"));\n}\n\n#[test]\nfn test_config_get() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"config\", \"get\", \"test_key\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Getting config value for: test_key\"));\n}\n\n#[test]\nfn test_config_reset() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"config\", \"reset\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Resetting configuration to defaults\"));\n}\n\n#[test]\nfn test_model_delete() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"model\", \"delete\", \"test-model\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Deleting model: test-model\"));\n}\n\n#[test]\nfn test_model_show() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"model\", \"show\", \"test-model\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Showing details for model: test-model\"));\n}\n\n#[test]\nfn test_image_generate() {\n    let temp_dir = assert_fs::TempDir::new().unwrap();\n    let input_file = temp_dir.child(\"input.jpg\");\n    let output_file = temp_dir.child(\"output.png\");\n\n    // Create a dummy input file\n    input_file.write_binary(b\"fake image data\").unwrap();\n\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\n        \"image\",\n        \"generate\",\n        \"A beautiful sunset\",\n        \"--model\",\n        \"test-model\",\n        \"--input\",\n        input_file.path().to_str().unwrap(),\n        \"--output\",\n        output_file.path().to_str().unwrap(),\n    ]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(output.status.success());\n\n    let stdout = String::from_utf8(output.stdout).unwrap();\n    assert!(stdout.contains(\"Generating image with prompt: A beautiful sunset\"));\n    assert!(stdout.contains(\"Using model: test-model\"));\n}\n\n#[test]\nfn test_invalid_command() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.arg(\"invalid-command\");\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(!output.status.success());\n}\n\n#[test]\nfn test_model_download_missing_name() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"model\", \"download\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(!output.status.success());\n\n    let stderr = String::from_utf8(output.stderr).unwrap();\n    assert!(stderr.contains(\"required\") || stderr.contains(\"missing\"));\n}\n\n#[test]\nfn test_image_generate_missing_arguments() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"image\", \"generate\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(!output.status.success());\n\n    let stderr = String::from_utf8(output.stderr).unwrap();\n    assert!(stderr.contains(\"required\") || stderr.contains(\"missing\"));\n}\n\n#[test]\nfn test_config_set_missing_value() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"config\", \"set\", \"key\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(!output.status.success());\n\n    let stderr = String::from_utf8(output.stderr).unwrap();\n    assert!(stderr.contains(\"required\") || stderr.contains(\"missing\"));\n}\n\n#[test]\nfn test_config_get_missing_key() {\n    let mut cmd = Command::new(get_binary_path());\n    cmd.args([\"config\", \"get\"]);\n\n    let output = cmd.output().expect(\"Failed to execute command\");\n\n    assert!(!output.status.success());\n\n    let stderr = String::from_utf8(output.stderr).unwrap();\n    assert!(stderr.contains(\"required\") || stderr.contains(\"missing\"));\n}\n","traces":[{"line":8,"address":[],"length":0,"stats":{"Line":18}},{"line":10,"address":[],"length":0,"stats":{"Line":54}},{"line":11,"address":[],"length":0,"stats":{"Line":36}},{"line":14,"address":[],"length":0,"stats":{"Line":18}},{"line":16,"address":[],"length":0,"stats":{"Line":18}},{"line":17,"address":[],"length":0,"stats":{"Line":18}},{"line":32,"address":[],"length":0,"stats":{"Line":1}},{"line":33,"address":[],"length":0,"stats":{"Line":3}},{"line":34,"address":[],"length":0,"stats":{"Line":2}},{"line":36,"address":[],"length":0,"stats":{"Line":5}},{"line":40,"address":[],"length":0,"stats":{"Line":4}},{"line":48,"address":[],"length":0,"stats":{"Line":1}},{"line":49,"address":[],"length":0,"stats":{"Line":3}},{"line":50,"address":[],"length":0,"stats":{"Line":2}},{"line":52,"address":[],"length":0,"stats":{"Line":5}},{"line":56,"address":[],"length":0,"stats":{"Line":4}},{"line":61,"address":[],"length":0,"stats":{"Line":1}},{"line":62,"address":[],"length":0,"stats":{"Line":3}},{"line":63,"address":[],"length":0,"stats":{"Line":3}},{"line":65,"address":[],"length":0,"stats":{"Line":5}},{"line":69,"address":[],"length":0,"stats":{"Line":4}},{"line":78,"address":[],"length":0,"stats":{"Line":1}},{"line":79,"address":[],"length":0,"stats":{"Line":3}},{"line":80,"address":[],"length":0,"stats":{"Line":3}},{"line":82,"address":[],"length":0,"stats":{"Line":5}},{"line":86,"address":[],"length":0,"stats":{"Line":4}},{"line":95,"address":[],"length":0,"stats":{"Line":1}},{"line":96,"address":[],"length":0,"stats":{"Line":3}},{"line":97,"address":[],"length":0,"stats":{"Line":3}},{"line":99,"address":[],"length":0,"stats":{"Line":5}},{"line":103,"address":[],"length":0,"stats":{"Line":4}},{"line":109,"address":[],"length":0,"stats":{"Line":1}},{"line":110,"address":[],"length":0,"stats":{"Line":3}},{"line":111,"address":[],"length":0,"stats":{"Line":3}},{"line":114,"address":[],"length":0,"stats":{"Line":3}},{"line":115,"address":[],"length":0,"stats":{"Line":4}},{"line":117,"address":[],"length":0,"stats":{"Line":5}},{"line":124,"address":[],"length":0,"stats":{"Line":1}},{"line":125,"address":[],"length":0,"stats":{"Line":3}},{"line":126,"address":[],"length":0,"stats":{"Line":3}},{"line":128,"address":[],"length":0,"stats":{"Line":5}},{"line":132,"address":[],"length":0,"stats":{"Line":4}},{"line":137,"address":[],"length":0,"stats":{"Line":1}},{"line":138,"address":[],"length":0,"stats":{"Line":3}},{"line":139,"address":[],"length":0,"stats":{"Line":4}},{"line":141,"address":[],"length":0,"stats":{"Line":5}},{"line":145,"address":[],"length":0,"stats":{"Line":4}},{"line":150,"address":[],"length":0,"stats":{"Line":1}},{"line":151,"address":[],"length":0,"stats":{"Line":3}},{"line":152,"address":[],"length":0,"stats":{"Line":3}},{"line":154,"address":[],"length":0,"stats":{"Line":5}},{"line":158,"address":[],"length":0,"stats":{"Line":4}},{"line":163,"address":[],"length":0,"stats":{"Line":1}},{"line":164,"address":[],"length":0,"stats":{"Line":3}},{"line":165,"address":[],"length":0,"stats":{"Line":3}},{"line":167,"address":[],"length":0,"stats":{"Line":5}},{"line":171,"address":[],"length":0,"stats":{"Line":4}},{"line":176,"address":[],"length":0,"stats":{"Line":1}},{"line":177,"address":[],"length":0,"stats":{"Line":3}},{"line":178,"address":[],"length":0,"stats":{"Line":3}},{"line":180,"address":[],"length":0,"stats":{"Line":5}},{"line":184,"address":[],"length":0,"stats":{"Line":4}},{"line":189,"address":[],"length":0,"stats":{"Line":1}},{"line":190,"address":[],"length":0,"stats":{"Line":3}},{"line":191,"address":[],"length":0,"stats":{"Line":3}},{"line":193,"address":[],"length":0,"stats":{"Line":5}},{"line":197,"address":[],"length":0,"stats":{"Line":4}},{"line":202,"address":[],"length":0,"stats":{"Line":1}},{"line":203,"address":[],"length":0,"stats":{"Line":3}},{"line":204,"address":[],"length":0,"stats":{"Line":3}},{"line":205,"address":[],"length":0,"stats":{"Line":3}},{"line":208,"address":[],"length":0,"stats":{"Line":4}},{"line":210,"address":[],"length":0,"stats":{"Line":3}},{"line":211,"address":[],"length":0,"stats":{"Line":3}},{"line":212,"address":[],"length":0,"stats":{"Line":1}},{"line":213,"address":[],"length":0,"stats":{"Line":2}},{"line":214,"address":[],"length":0,"stats":{"Line":2}},{"line":215,"address":[],"length":0,"stats":{"Line":2}},{"line":216,"address":[],"length":0,"stats":{"Line":2}},{"line":217,"address":[],"length":0,"stats":{"Line":2}},{"line":218,"address":[],"length":0,"stats":{"Line":3}},{"line":219,"address":[],"length":0,"stats":{"Line":2}},{"line":220,"address":[],"length":0,"stats":{"Line":2}},{"line":223,"address":[],"length":0,"stats":{"Line":5}},{"line":227,"address":[],"length":0,"stats":{"Line":4}},{"line":233,"address":[],"length":0,"stats":{"Line":1}},{"line":234,"address":[],"length":0,"stats":{"Line":3}},{"line":235,"address":[],"length":0,"stats":{"Line":2}},{"line":237,"address":[],"length":0,"stats":{"Line":5}},{"line":243,"address":[],"length":0,"stats":{"Line":1}},{"line":244,"address":[],"length":0,"stats":{"Line":3}},{"line":245,"address":[],"length":0,"stats":{"Line":3}},{"line":247,"address":[],"length":0,"stats":{"Line":5}},{"line":251,"address":[],"length":0,"stats":{"Line":4}},{"line":256,"address":[],"length":0,"stats":{"Line":1}},{"line":257,"address":[],"length":0,"stats":{"Line":3}},{"line":258,"address":[],"length":0,"stats":{"Line":3}},{"line":260,"address":[],"length":0,"stats":{"Line":5}},{"line":264,"address":[],"length":0,"stats":{"Line":4}},{"line":269,"address":[],"length":0,"stats":{"Line":1}},{"line":270,"address":[],"length":0,"stats":{"Line":3}},{"line":271,"address":[],"length":0,"stats":{"Line":3}},{"line":273,"address":[],"length":0,"stats":{"Line":5}},{"line":277,"address":[],"length":0,"stats":{"Line":4}},{"line":282,"address":[],"length":0,"stats":{"Line":1}},{"line":283,"address":[],"length":0,"stats":{"Line":3}},{"line":284,"address":[],"length":0,"stats":{"Line":3}},{"line":286,"address":[],"length":0,"stats":{"Line":5}},{"line":290,"address":[],"length":0,"stats":{"Line":4}}],"covered":109,"coverable":109},{"path":["/","Users","scott","Code","si","tests","model_manager_tests.rs"],"content":"use anyhow::Result;\nuse si::models::{ModelFile, ModelIndex, ModelInfo, ModelManagerBuilder};\nuse std::fs;\nuse tempfile::tempdir;\n\n#[tokio::test]\nasync fn test_model_manager_creation() -> Result<()> {\n    let temp_dir = tempdir()?;\n    let models_dir = temp_dir.path().join(\"models\");\n\n    // Test that ModelManager::new() creates the models directory\n    let _manager = ModelManagerBuilder::new()\n        .with_models_dir(models_dir.clone())\n        .build()\n        .map(|mgr| {\n            // If manager creation succeeds, create the directory like ModelManager::new() does\n            std::fs::create_dir_all(&models_dir).expect(\"Failed to create models dir\");\n            mgr\n        });\n\n    // The directory should exist if manager creation was successful\n    // If API creation fails, that's acceptable in test environments\n    Ok(())\n}\n\n#[tokio::test]\nasync fn test_model_manager_list_with_empty_index() -> Result<()> {\n    let temp_dir = tempdir()?;\n    let models_dir = temp_dir.path().join(\"models\");\n    fs::create_dir_all(&models_dir)?;\n\n    // Create an empty model index\n    let index_path = models_dir.join(\"model_index.json\");\n    let empty_index = ModelIndex { models: vec![] };\n    let index_json = serde_json::to_string_pretty(&empty_index)?;\n    fs::write(&index_path, index_json)?;\n\n    if let Ok(manager) = ModelManagerBuilder::new()\n        .with_models_dir(models_dir)\n        .build()\n    {\n        let models = manager.list_models()?;\n        assert_eq!(models.len(), 0);\n    }\n\n    Ok(())\n}\n\n#[tokio::test]\nasync fn test_model_manager_list_with_populated_index() -> Result<()> {\n    let temp_dir = tempdir()?;\n    let models_dir = temp_dir.path().join(\"models\");\n    fs::create_dir_all(&models_dir)?;\n\n    // Create a populated model index\n    let index_path = models_dir.join(\"model_index.json\");\n    let test_models = vec![\n        ModelInfo::new(\n            \"test-model-1\",\n            vec![ModelFile {\n                size: 1024,\n                path: models_dir.join(\"test-model-1\").join(\"model.bin\"),\n            }],\n        ),\n        ModelInfo::new(\n            \"test-model-2\",\n            vec![\n                ModelFile {\n                    size: 2048,\n                    path: models_dir.join(\"test-model-2\").join(\"model.bin\"),\n                },\n                ModelFile {\n                    size: 512,\n                    path: models_dir.join(\"test-model-2\").join(\"config.json\"),\n                },\n            ],\n        ),\n    ];\n\n    let index = ModelIndex {\n        models: test_models,\n    };\n    let index_json = serde_json::to_string_pretty(&index)?;\n    fs::write(&index_path, index_json)?;\n\n    if let Ok(manager) = ModelManagerBuilder::new()\n        .with_models_dir(models_dir)\n        .build()\n    {\n        let models = manager.list_models()?;\n        assert_eq!(models.len(), 2);\n        assert_eq!(models[0].model_id, \"test-model-1\");\n        assert_eq!(models[1].model_id, \"test-model-2\");\n        assert_eq!(models[0].files.len(), 1);\n        assert_eq!(models[1].files.len(), 2);\n    }\n\n    Ok(())\n}\n\n#[tokio::test]\nasync fn test_model_manager_list_with_malformed_index() -> Result<()> {\n    let temp_dir = tempdir()?;\n    let models_dir = temp_dir.path().join(\"models\");\n    fs::create_dir_all(&models_dir)?;\n\n    // Create a malformed model index\n    let index_path = models_dir.join(\"model_index.json\");\n    fs::write(&index_path, \"{ invalid json }\")?;\n\n    if let Ok(manager) = ModelManagerBuilder::new()\n        .with_models_dir(models_dir)\n        .build()\n    {\n        let result = manager.list_models();\n        assert!(result.is_err());\n    }\n\n    Ok(())\n}\n\n#[test]\nfn test_model_info_persistence() -> Result<()> {\n    let temp_dir = tempdir()?;\n    let model_file_path = temp_dir.path().join(\"test_model.json\");\n\n    let original_model = ModelInfo::new(\n        \"test-model\",\n        vec![\n            ModelFile {\n                size: 1024,\n                path: temp_dir.path().join(\"model.bin\"),\n            },\n            ModelFile {\n                size: 256,\n                path: temp_dir.path().join(\"config.json\"),\n            },\n        ],\n    );\n\n    // Serialize to file\n    let json = serde_json::to_string_pretty(&original_model)?;\n    fs::write(&model_file_path, json)?;\n\n    // Deserialize from file\n    let loaded_model = ModelInfo::try_from(model_file_path.as_path())?;\n\n    assert_eq!(original_model.model_id, loaded_model.model_id);\n    assert_eq!(original_model.files.len(), loaded_model.files.len());\n\n    for (orig, loaded) in original_model.files.iter().zip(loaded_model.files.iter()) {\n        assert_eq!(orig.size, loaded.size);\n        assert_eq!(orig.path, loaded.path);\n    }\n\n    Ok(())\n}\n\n#[test]\nfn test_model_index_persistence() -> Result<()> {\n    let temp_dir = tempdir()?;\n    let index_file_path = temp_dir.path().join(\"model_index.json\");\n\n    let original_index = ModelIndex {\n        models: vec![\n            ModelInfo::new(\"model1\", vec![]),\n            ModelInfo::new(\n                \"model2\",\n                vec![ModelFile {\n                    size: 512,\n                    path: temp_dir.path().join(\"model2.bin\"),\n                }],\n            ),\n        ],\n    };\n\n    // Serialize to file\n    let json = serde_json::to_string_pretty(&original_index)?;\n    fs::write(&index_file_path, json)?;\n\n    // Deserialize from file\n    let loaded_index = ModelIndex::try_from(index_file_path.as_path())?;\n\n    assert_eq!(original_index.models.len(), loaded_index.models.len());\n    assert_eq!(\n        original_index.models[0].model_id,\n        loaded_index.models[0].model_id\n    );\n    assert_eq!(\n        original_index.models[1].model_id,\n        loaded_index.models[1].model_id\n    );\n    assert_eq!(\n        original_index.models[1].files.len(),\n        loaded_index.models[1].files.len()\n    );\n\n    Ok(())\n}\n\n#[test]\nfn test_model_manager_builder_validation() {\n    // Test builder without any configuration\n    let result = ModelManagerBuilder::new().build();\n    // Should either succeed with defaults or fail gracefully\n    match result {\n        Ok(_) => {\n            // Success case\n        }\n        Err(_) => {\n            // Failure case is acceptable in test environments\n        }\n    }\n}\n\n#[tokio::test]\nasync fn test_model_manager_concurrent_access() -> Result<()> {\n    let temp_dir = tempdir()?;\n    let models_dir = temp_dir.path().join(\"models\");\n    fs::create_dir_all(&models_dir)?;\n\n    // Create a model index\n    let index_path = models_dir.join(\"model_index.json\");\n    let test_model = ModelInfo::new(\"concurrent-test-model\", vec![]);\n    let index = ModelIndex {\n        models: vec![test_model],\n    };\n    let index_json = serde_json::to_string_pretty(&index)?;\n    fs::write(&index_path, index_json)?;\n\n    if let Ok(manager) = ModelManagerBuilder::new()\n        .with_models_dir(models_dir)\n        .build()\n    {\n        // Simulate concurrent access by calling list_models multiple times\n        let tasks = (0..5).map(|_| {\n            let mgr = &manager;\n            async move { mgr.list_models() }\n        });\n\n        let results = futures_util::future::join_all(tasks).await;\n\n        // All results should be consistent\n        for result in results {\n            match result {\n                Ok(models) => {\n                    assert_eq!(models.len(), 1);\n                    assert_eq!(models[0].model_id, \"concurrent-test-model\");\n                }\n                Err(_) => {\n                    // Some failures might be acceptable due to test environment\n                }\n            }\n        }\n    }\n\n    Ok(())\n}\n\n#[test]\nfn test_model_file_edge_cases() -> Result<()> {\n    // Test ModelFile with empty path\n    let model_file = ModelFile {\n        size: 0,\n        path: std::path::PathBuf::new(),\n    };\n\n    let json = serde_json::to_string(&model_file)?;\n    let deserialized: ModelFile = serde_json::from_str(&json)?;\n\n    assert_eq!(model_file.size, deserialized.size);\n    assert_eq!(model_file.path, deserialized.path);\n\n    // Test ModelFile with very large size\n    let large_model_file = ModelFile {\n        size: u64::MAX,\n        path: std::path::PathBuf::from(\"/very/long/path/to/a/model/file.bin\"),\n    };\n\n    let json = serde_json::to_string(&large_model_file)?;\n    let deserialized: ModelFile = serde_json::from_str(&json)?;\n\n    assert_eq!(large_model_file.size, deserialized.size);\n    assert_eq!(large_model_file.path, deserialized.path);\n\n    Ok(())\n}\n\n#[test]\nfn test_model_info_with_special_characters() -> Result<()> {\n    let model_info = ModelInfo::new(\n        \"model-with-special-chars-!@#$%^&*()\",\n        vec![ModelFile {\n            size: 1024,\n            path: std::path::PathBuf::from(\"/path/with spaces/and-special-chars!.bin\"),\n        }],\n    );\n\n    let json = serde_json::to_string(&model_info)?;\n    let deserialized: ModelInfo = serde_json::from_str(&json)?;\n\n    assert_eq!(model_info.model_id, deserialized.model_id);\n    assert_eq!(model_info.files.len(), deserialized.files.len());\n    assert_eq!(model_info.files[0].path, deserialized.files[0].path);\n\n    Ok(())\n}\n","traces":[{"line":7,"address":[],"length":0,"stats":{"Line":2}},{"line":8,"address":[],"length":0,"stats":{"Line":2}},{"line":15,"address":[],"length":0,"stats":{"Line":1}},{"line":17,"address":[],"length":0,"stats":{"Line":4}},{"line":18,"address":[],"length":0,"stats":{"Line":1}},{"line":23,"address":[],"length":0,"stats":{"Line":1}},{"line":27,"address":[],"length":0,"stats":{"Line":2}},{"line":28,"address":[],"length":0,"stats":{"Line":2}},{"line":30,"address":[],"length":0,"stats":{"Line":0}},{"line":33,"address":[],"length":0,"stats":{"Line":1}},{"line":35,"address":[],"length":0,"stats":{"Line":1}},{"line":36,"address":[],"length":0,"stats":{"Line":0}},{"line":38,"address":[],"length":0,"stats":{"Line":3}},{"line":39,"address":[],"length":0,"stats":{"Line":1}},{"line":42,"address":[],"length":0,"stats":{"Line":2}},{"line":46,"address":[],"length":0,"stats":{"Line":2}},{"line":50,"address":[],"length":0,"stats":{"Line":2}},{"line":51,"address":[],"length":0,"stats":{"Line":2}},{"line":53,"address":[],"length":0,"stats":{"Line":0}},{"line":56,"address":[],"length":0,"stats":{"Line":1}},{"line":83,"address":[],"length":0,"stats":{"Line":1}},{"line":84,"address":[],"length":0,"stats":{"Line":0}},{"line":86,"address":[],"length":0,"stats":{"Line":3}},{"line":87,"address":[],"length":0,"stats":{"Line":1}},{"line":90,"address":[],"length":0,"stats":{"Line":2}},{"line":98,"address":[],"length":0,"stats":{"Line":2}},{"line":102,"address":[],"length":0,"stats":{"Line":2}},{"line":103,"address":[],"length":0,"stats":{"Line":2}},{"line":105,"address":[],"length":0,"stats":{"Line":0}},{"line":108,"address":[],"length":0,"stats":{"Line":1}},{"line":109,"address":[],"length":0,"stats":{"Line":0}},{"line":111,"address":[],"length":0,"stats":{"Line":3}},{"line":112,"address":[],"length":0,"stats":{"Line":1}},{"line":115,"address":[],"length":0,"stats":{"Line":1}},{"line":119,"address":[],"length":0,"stats":{"Line":2}},{"line":123,"address":[],"length":0,"stats":{"Line":1}},{"line":124,"address":[],"length":0,"stats":{"Line":2}},{"line":142,"address":[],"length":0,"stats":{"Line":1}},{"line":143,"address":[],"length":0,"stats":{"Line":0}},{"line":146,"address":[],"length":0,"stats":{"Line":2}},{"line":151,"address":[],"length":0,"stats":{"Line":7}},{"line":156,"address":[],"length":0,"stats":{"Line":1}},{"line":160,"address":[],"length":0,"stats":{"Line":1}},{"line":161,"address":[],"length":0,"stats":{"Line":2}},{"line":178,"address":[],"length":0,"stats":{"Line":1}},{"line":179,"address":[],"length":0,"stats":{"Line":0}},{"line":182,"address":[],"length":0,"stats":{"Line":2}},{"line":198,"address":[],"length":0,"stats":{"Line":1}},{"line":202,"address":[],"length":0,"stats":{"Line":1}},{"line":204,"address":[],"length":0,"stats":{"Line":3}},{"line":206,"address":[],"length":0,"stats":{"Line":1}},{"line":207,"address":[],"length":0,"stats":{"Line":1}},{"line":210,"address":[],"length":0,"stats":{"Line":0}},{"line":217,"address":[],"length":0,"stats":{"Line":2}},{"line":218,"address":[],"length":0,"stats":{"Line":2}},{"line":220,"address":[],"length":0,"stats":{"Line":0}},{"line":223,"address":[],"length":0,"stats":{"Line":1}},{"line":228,"address":[],"length":0,"stats":{"Line":1}},{"line":229,"address":[],"length":0,"stats":{"Line":0}},{"line":231,"address":[],"length":0,"stats":{"Line":3}},{"line":232,"address":[],"length":0,"stats":{"Line":1}},{"line":236,"address":[],"length":0,"stats":{"Line":6}},{"line":237,"address":[],"length":0,"stats":{"Line":11}},{"line":238,"address":[],"length":0,"stats":{"Line":21}},{"line":241,"address":[],"length":0,"stats":{"Line":2}},{"line":244,"address":[],"length":0,"stats":{"Line":12}},{"line":245,"address":[],"length":0,"stats":{"Line":6}},{"line":246,"address":[],"length":0,"stats":{"Line":6}},{"line":250,"address":[],"length":0,"stats":{"Line":1}},{"line":257,"address":[],"length":0,"stats":{"Line":2}},{"line":261,"address":[],"length":0,"stats":{"Line":1}},{"line":265,"address":[],"length":0,"stats":{"Line":1}},{"line":268,"address":[],"length":0,"stats":{"Line":3}},{"line":269,"address":[],"length":0,"stats":{"Line":1}},{"line":277,"address":[],"length":0,"stats":{"Line":1}},{"line":280,"address":[],"length":0,"stats":{"Line":3}},{"line":281,"address":[],"length":0,"stats":{"Line":1}},{"line":286,"address":[],"length":0,"stats":{"Line":1}},{"line":290,"address":[],"length":0,"stats":{"Line":1}},{"line":293,"address":[],"length":0,"stats":{"Line":2}},{"line":294,"address":[],"length":0,"stats":{"Line":1}},{"line":295,"address":[],"length":0,"stats":{"Line":1}},{"line":299,"address":[],"length":0,"stats":{"Line":3}},{"line":300,"address":[],"length":0,"stats":{"Line":1}},{"line":306,"address":[],"length":0,"stats":{"Line":1}}],"covered":74,"coverable":85}],"coverage":81.91964285714286,"covered":367,"coverable":448}